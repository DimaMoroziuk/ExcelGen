{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dima\\\\source\\\\repos\\\\ExcelGen\\\\ExcelGen\\\\ClientApp\\\\src\\\\components\\\\FetchData.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class FetchData extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      forecasts: [],\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    this.populateWeatherData(); // this.populateExcel();\n    // this.populateAnotherExcel();\n  }\n\n  static renderForecastsTable(forecasts) {\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-striped\",\n      \"aria-labelledby\": \"tabelLabel\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Temp. (C)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Temp. (F)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Summary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: forecasts.map(forecast => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: forecast.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: forecast.temperatureC\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: forecast.temperatureF\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: forecast.summary\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 15\n          }, this)]\n        }, forecast.date, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    let contents = this.state.loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"em\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this) : FetchData.renderForecastsTable(this.state.forecasts);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        id: \"tabelLabel\",\n        children: \"Weather forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This component demonstrates fetching data from the server.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), contents, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => populateAnotherExcel(),\n        style: {\n          backgroundColor: 'yellow'\n        },\n        className: \"btn\",\n        children: \"Generate  Excel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  }\n\n  async populateWeatherData() {\n    const response = await fetch('WeatherForecast');\n    const data = await response.json();\n    this.setState({\n      forecasts: data,\n      loading: false\n    });\n  }\n\n  async populateExcel() {\n    const myHeaders = new Headers();\n    const myInit = {\n      method: 'POST',\n      headers: myHeaders,\n      mode: 'cors',\n      cache: 'default'\n    };\n    const myRequest = new Request('api/Discipline/excel', myInit);\n    const response = await fetch(myRequest);\n    console.log(await response.blob());\n  }\n\n  async populateAnotherExcel() {\n    // const downloadExcelLink = document.getElementById('downloadExcelLink');\n    // window.open('http://localhost:3000/api/Discipline/excelTry');\n    // const method = \"GET\";\n    //             const headers = {\n    //                 'Accept': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    //                 'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    //                 'Content-Disposition': 'attachment; fileName='\n    //             };\n    //             const options = {\n    //                 method,\n    //                 headers\n    //             };\n    //             const res = await fetch('api/Discipline/excelTry', options);\n    const downloadExcelResponse = await fetch('api/Discipline/excelTry');\n    let file = new Blob([await downloadExcelResponse.blob()], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    }); // let fileName =  await downloadExcelResponse.headers.get('Content-Disposition').split(';')[1].trim().split('=')[1];\n    // saveAs(file, \"TestExcel.xlsx\");\n    // const downloadExcelBlob = await downloadExcelResponse.blob();\n    // const downloadExcelObjectURL = URL.createObjectURL(downloadExcelBlob);\n    // downloadExcelLink.href = downloadExcelObjectURL;\n  }\n\n}\nFetchData.displayName = FetchData.name;","map":{"version":3,"names":["React","Component","FetchData","constructor","props","state","forecasts","loading","componentDidMount","populateWeatherData","renderForecastsTable","map","forecast","date","temperatureC","temperatureF","summary","render","contents","populateAnotherExcel","backgroundColor","response","fetch","data","json","setState","populateExcel","myHeaders","Headers","myInit","method","headers","mode","cache","myRequest","Request","console","log","blob","downloadExcelResponse","file","Blob","type","displayName","name"],"sources":["C:/Users/Dima/source/repos/ExcelGen/ExcelGen/ClientApp/src/components/FetchData.js"],"sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport class FetchData extends Component {\r\n  static displayName = FetchData.name;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { forecasts: [], loading: true };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.populateWeatherData();\r\n    // this.populateExcel();\r\n    // this.populateAnotherExcel();\r\n  }\r\n\r\n  static renderForecastsTable(forecasts) {\r\n    return (\r\n      <table className='table table-striped' aria-labelledby=\"tabelLabel\">\r\n        <thead>\r\n          <tr>\r\n            <th>Date</th>\r\n            <th>Temp. (C)</th>\r\n            <th>Temp. (F)</th>\r\n            <th>Summary</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {forecasts.map(forecast =>\r\n            <tr key={forecast.date}>\r\n              <td>{forecast.date}</td>\r\n              <td>{forecast.temperatureC}</td>\r\n              <td>{forecast.temperatureF}</td>\r\n              <td>{forecast.summary}</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    let contents = this.state.loading\r\n      ? <p><em>Loading...</em></p>\r\n      : FetchData.renderForecastsTable(this.state.forecasts);\r\n\r\n    return (\r\n      <div>\r\n        {/* <a id=\"downloadExcelLink\" download=\"excelFile.xlsx\" href=\"blob:http://localhost:3000/api/Discipline/excelTry\">Download Excel File</a> */}\r\n        <h1 id=\"tabelLabel\" >Weather forecast</h1>\r\n        <p>This component demonstrates fetching data from the server.</p>\r\n        {contents}\r\n\r\n        <button \r\n        onClick={() => populateAnotherExcel()}\r\n        style={{backgroundColor: 'yellow'}} \r\n        className='btn'>\r\n        Generate  Excel\r\n    </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  async populateWeatherData() {\r\n    const response = await fetch('WeatherForecast');\r\n    const data = await response.json();\r\n    this.setState({ forecasts: data, loading: false }); \r\n  }\r\n\r\n  async populateExcel() {\r\n    const myHeaders = new Headers();\r\n\r\n    const myInit = {\r\n      method: 'POST',\r\n      headers: myHeaders,\r\n      mode: 'cors',\r\n      cache: 'default'\r\n    };\r\n\r\n    const myRequest = new Request('api/Discipline/excel', myInit);\r\n    const response = await fetch(myRequest); \r\n    console.log(await response.blob());\r\n  }\r\n\r\n  async populateAnotherExcel() {\r\n    // const downloadExcelLink = document.getElementById('downloadExcelLink');\r\n    // window.open('http://localhost:3000/api/Discipline/excelTry');\r\n    // const method = \"GET\";\r\n    //             const headers = {\r\n    //                 'Accept': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n    //                 'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n    //                 'Content-Disposition': 'attachment; fileName='\r\n    //             };\r\n    //             const options = {\r\n    //                 method,\r\n    //                 headers\r\n    //             };\r\n    //             const res = await fetch('api/Discipline/excelTry', options);\r\n    const downloadExcelResponse = await fetch('api/Discipline/excelTry')\r\n      let file = new Blob( [await downloadExcelResponse.blob()], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\r\n      // let fileName =  await downloadExcelResponse.headers.get('Content-Disposition').split(';')[1].trim().split('=')[1];\r\n      // saveAs(file, \"TestExcel.xlsx\");\r\n    // const downloadExcelBlob = await downloadExcelResponse.blob();\r\n    // const downloadExcelObjectURL = URL.createObjectURL(downloadExcelBlob);\r\n    // downloadExcelLink.href = downloadExcelObjectURL;\r\n  }\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,OAAO,MAAMC,SAAN,SAAwBD,SAAxB,CAAkC;EAGvCE,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;IACA,KAAKC,KAAL,GAAa;MAAEC,SAAS,EAAE,EAAb;MAAiBC,OAAO,EAAE;IAA1B,CAAb;EACD;;EAEDC,iBAAiB,GAAG;IAClB,KAAKC,mBAAL,GADkB,CAElB;IACA;EACD;;EAE0B,OAApBC,oBAAoB,CAACJ,SAAD,EAAY;IACrC,oBACE;MAAO,SAAS,EAAC,qBAAjB;MAAuC,mBAAgB,YAAvD;MAAA,wBACE;QAAA,uBACE;UAAA,wBACE;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QADF,eAEE;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAFF,eAGE;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAHF,eAIE;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAJF;QAAA;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QADF,eASE;QAAA,UACGA,SAAS,CAACK,GAAV,CAAcC,QAAQ,iBACrB;UAAA,wBACE;YAAA,UAAKA,QAAQ,CAACC;UAAd;YAAA;YAAA;YAAA;UAAA,QADF,eAEE;YAAA,UAAKD,QAAQ,CAACE;UAAd;YAAA;YAAA;YAAA;UAAA,QAFF,eAGE;YAAA,UAAKF,QAAQ,CAACG;UAAd;YAAA;YAAA;YAAA;UAAA,QAHF,eAIE;YAAA,UAAKH,QAAQ,CAACI;UAAd;YAAA;YAAA;YAAA;UAAA,QAJF;QAAA,GAASJ,QAAQ,CAACC,IAAlB;UAAA;UAAA;UAAA;QAAA,QADD;MADH;QAAA;QAAA;QAAA;MAAA,QATF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAsBD;;EAEDI,MAAM,GAAG;IACP,IAAIC,QAAQ,GAAG,KAAKb,KAAL,CAAWE,OAAX,gBACX;MAAA,uBAAG;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAH;MAAA;MAAA;MAAA;IAAA,QADW,GAEXL,SAAS,CAACQ,oBAAV,CAA+B,KAAKL,KAAL,CAAWC,SAA1C,CAFJ;IAIA,oBACE;MAAA,wBAEE;QAAI,EAAE,EAAC,YAAP;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAHF,EAIGY,QAJH,eAME;QACA,OAAO,EAAE,MAAMC,oBAAoB,EADnC;QAEA,KAAK,EAAE;UAACC,eAAe,EAAE;QAAlB,CAFP;QAGA,SAAS,EAAC,KAHV;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QANF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAeD;;EAEwB,MAAnBX,mBAAmB,GAAG;IAC1B,MAAMY,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAD,CAA5B;IACA,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;IACA,KAAKC,QAAL,CAAc;MAAEnB,SAAS,EAAEiB,IAAb;MAAmBhB,OAAO,EAAE;IAA5B,CAAd;EACD;;EAEkB,MAAbmB,aAAa,GAAG;IACpB,MAAMC,SAAS,GAAG,IAAIC,OAAJ,EAAlB;IAEA,MAAMC,MAAM,GAAG;MACbC,MAAM,EAAE,MADK;MAEbC,OAAO,EAAEJ,SAFI;MAGbK,IAAI,EAAE,MAHO;MAIbC,KAAK,EAAE;IAJM,CAAf;IAOA,MAAMC,SAAS,GAAG,IAAIC,OAAJ,CAAY,sBAAZ,EAAoCN,MAApC,CAAlB;IACA,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAACY,SAAD,CAA5B;IACAE,OAAO,CAACC,GAAR,CAAY,MAAMhB,QAAQ,CAACiB,IAAT,EAAlB;EACD;;EAEyB,MAApBnB,oBAAoB,GAAG;IAC3B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAMoB,qBAAqB,GAAG,MAAMjB,KAAK,CAAC,yBAAD,CAAzC;IACE,IAAIkB,IAAI,GAAG,IAAIC,IAAJ,CAAU,CAAC,MAAMF,qBAAqB,CAACD,IAAtB,EAAP,CAAV,EAAgD;MAAEI,IAAI,EAAE;IAAR,CAAhD,CAAX,CAfyB,CAgBzB;IACA;IACF;IACA;IACA;EACD;;AAvGsC;AAA5BxC,S,CACJyC,W,GAAczC,SAAS,CAAC0C,I"},"metadata":{},"sourceType":"module"}